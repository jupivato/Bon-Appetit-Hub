// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
    output = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
   provider = "prisma-erd-generator"
   output   = "./er_diagram.svg"
}

enum Role {
  COMUM
  ADMINISTRADOR
}

enum DificuldadeReceita {
  FACIL
  MEDIO
  DIFICIL
}

model Usuario {
  id                  Int               @id @default(autoincrement())
  nome                String
  email               String            @unique
  senha               String
  role                Role              @default(COMUM)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  receitasCadastradas Receita[]         @relation("AutorDaReceita")
  comentarios         Comentario[]      @relation("AutorDoComentario")
  receitasFavoritas   ReceitaFavorita[]
  listaDeCompras      ListaCompras?

  @@map("usuarios")
}

model Categoria {
  id        Int       @id @default(autoincrement())
  nome      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  receitas  Receita[]

  @@map("categorias")
}

model Etiqueta {
  id        Int               @id @default(autoincrement())
  nome      String            @unique
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  receitas  ReceitaEtiqueta[]

  @@map("etiquetas")
}

model Ingrediente {
  id                    Int                        @id @default(autoincrement())
  nome                  String                     @unique
  imagemUrl             String?                    @map("imagem_url")
  categoriaIngrediente  String?
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  itemEmReceitas        ItemReceitaIngrediente[]
  itemEmListasDeCompras ItemListaCompras[]

  @@map("ingredientes")
}

model Receita {
  id              Int                 @id @default(autoincrement())
  titulo          String
  descricao       String
  imagemUrl       String?             @map("imagem_url")
  tempoPreparo    String              @map("tempo_preparo")
  dificuldade     DificuldadeReceita
  rendimento      Int
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  autorId         Int
  autor           Usuario             @relation("AutorDaReceita", fields: [autorId], references: [id], onDelete: Cascade)
  categoriaId     Int
  categoria       Categoria           @relation(fields: [categoriaId], references: [id], onDelete: Restrict)
  comentarios     Comentario[]
  etiquetas       ReceitaEtiqueta[]
  favoritadoPor   ReceitaFavorita[]
  ingredientes    ItemReceitaIngrediente[]

  @@map("receitas")
}

model ReceitaEtiqueta {
  receitaId  Int
  receita    Receita  @relation(fields: [receitaId], references: [id], onDelete: Cascade)
  etiquetaId Int
  etiqueta   Etiqueta @relation(fields: [etiquetaId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())

  @@id([receitaId, etiquetaId])
  @@map("receita_etiquetas")
}

model Comentario {
  id        Int      @id @default(autoincrement())
  texto     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  autorId   Int
  autor     Usuario  @relation("AutorDoComentario", fields: [autorId], references: [id], onDelete: Cascade)
  receitaId Int
  receita   Receita  @relation(fields: [receitaId], references: [id], onDelete: Cascade)

  @@map("comentarios")
}

model ReceitaFavorita {
  usuarioId   Int
  usuario     Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  receitaId   Int
  receita     Receita  @relation(fields: [receitaId], references: [id], onDelete: Cascade)
  favoritedAt DateTime @default(now())

  @@id([usuarioId, receitaId])
  @@map("receitas_favoritas")
}

model ItemReceitaIngrediente {
  id            Int         @id @default(autoincrement())
  quantidade    Float
  unidade       String
  receitaId     Int
  receita       Receita     @relation(fields: [receitaId], references: [id], onDelete: Cascade)
  ingredienteId Int
  ingrediente   Ingrediente @relation(fields: [ingredienteId], references: [id], onDelete: Restrict)

  @@map("item_receita_ingredientes")
}

model ListaCompras {
  id        Int                @id @default(autoincrement())
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  usuarioId Int                @unique
  usuario   Usuario            @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  itens     ItemListaCompras[]

  @@map("listas_compras")
}

model ItemListaCompras {
  id             Int          @id @default(autoincrement())
  quantidade     Float
  unidade        String
  comprado       Boolean      @default(false)
  listaComprasId Int
  listaCompras   ListaCompras @relation(fields: [listaComprasId], references: [id], onDelete: Cascade)
  ingredienteId  Int
  ingrediente    Ingrediente  @relation(fields: [ingredienteId], references: [id], onDelete: Cascade)

  @@map("item_lista_compras")
}